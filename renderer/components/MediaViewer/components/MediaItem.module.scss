@import '../styles/constants.scss';

.media_item {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  user-select: none;

  img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    transform-origin: center center;

    &.rotating {
      transition: transform $transition-duration $transition-timing;
    }

    &.dragging {
      transition: none;
    }
  }
}

.media_container {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;

  &.paused {
    .video_controls {
      opacity: 1;
    }
  }

  .react_player {
    width: 100% !important;

    >div {
      width: 100% !important;
    }
  }
}

.video_wrapper {
  width: 100%;
  height: 100%;
  cursor: pointer;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

.video_controls {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: $controls-gradient;
  padding: 1rem;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  opacity: 0;
  transition: opacity $transition-duration $transition-timing;
  flex-wrap: wrap;
  z-index: $controls-z-index;

  &:hover {
    opacity: 1;
  }

  button {
    background: transparent;
    border: none;
    color: $text-color;
    padding: 0.375rem;
    border-radius: $border-radius;
    cursor: pointer;
    font-size: 0.8125rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
    min-width: $control-height;
    min-height: $control-height;
    transition: background-color $transition-duration $transition-timing;

    &:hover {
      background: $background-transparent;
    }

    svg {
      width: $icon-size;
      height: $icon-size;
    }
  }

  .progress_bar {
    flex: 1;
    min-width: 200px;
    position: relative;
    height: $control-height;
    display: flex;
    align-items: center;

    &::before {
      content: attr(data-time);
      position: absolute;
      left: 0;
      top: -20px;
      color: $text-color;
      font-size: 0.75rem;
      opacity: 0.8;
    }

    input[type="range"] {
      width: 100%;
      height: $slider-height;
      -webkit-appearance: none;
      background: rgba($text-color, 0.3);
      border-radius: $border-radius;
      outline: none;
      transition: height $transition-duration $transition-timing;
      margin: 0;

      &:hover {
        height: $slider-height * 1.5;
      }

      &::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: $slider-thumb-size;
        height: $slider-thumb-size;
        background: $primary-color;
        border-radius: 50%;
        cursor: pointer;
        transition: transform $transition-duration $transition-timing;
        border: 2px solid $text-color;
        margin-top: -4px;

        &:hover {
          transform: scale(1.2);
        }
      }

      &::-webkit-slider-runnable-track {
        background: linear-gradient(to right, $primary-color var(--progress), rgba($text-color, 0.3) var(--progress));
        border-radius: $border-radius;
        height: 100%;
        cursor: pointer;
      }
    }
  }

  .volume_control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    height: $control-height;

    &:hover {
      .volume_slider {
        width: 80px;
        opacity: 1;
        margin-left: 0.5rem;
      }
    }

    .volume_slider {
      width: 0;
      opacity: 0;
      transition: all $transition-duration $transition-timing;
      overflow: hidden;
      height: 100%;
      display: flex;
      align-items: center;

      input[type="range"] {
        width: 100%;
        height: $slider-height;
        -webkit-appearance: none;
        background: rgba($text-color, 0.3);
        border-radius: $border-radius;
        outline: none;
        margin: 0;

        &::-webkit-slider-thumb {
          -webkit-appearance: none;
          width: $slider-thumb-size;
          height: $slider-thumb-size;
          background: $primary-color;
          border-radius: 50%;
          cursor: pointer;
          border: 2px solid $text-color;
          transition: transform $transition-duration $transition-timing;
          margin-top: -4px;

          &:hover {
            transform: scale(1.2);
          }
        }

        &::-webkit-slider-runnable-track {
          background: linear-gradient(to right, $primary-color var(--volume), rgba($text-color, 0.3) var(--volume));
          border-radius: $border-radius;
          height: 100%;
          cursor: pointer;
        }
      }
    }
  }

  select {
    background: transparent;
    border: none;
    color: $text-color;
    padding: 0.375rem 1.5rem 0.375rem 0.75rem;
    border-radius: $border-radius;
    cursor: pointer;
    font-size: 0.8125rem;
    appearance: none;
    height: $control-height;
    display: flex;
    align-items: center;
    transition: background-color $transition-duration $transition-timing;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 6px center;
    background-size: 16px;

    &:hover {
      background-color: $background-transparent;
    }

    option {
      background: #1a1a1a;
      color: $text-color;
      padding: 0.75rem 1rem;
      min-height: $control-height;
      font-size: 0.8125rem;
      border: none;
      cursor: pointer;

      &:hover {
        background: $background-transparent;
      }

      &:checked {
        background: $primary-color;
      }
    }
  }

  .right_controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: auto;
    height: $control-height;
  }
}

.center_play_button {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: $text-color;
  opacity: 0.8;
  transition: opacity $transition-duration $transition-timing, transform $transition-duration $transition-timing;
  cursor: pointer;

  &:hover {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.1);
  }
}

.error_message {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: $background-dark;
  padding: 1rem;
  border-radius: $border-radius;
  color: $error-color;
  text-align: center;
  max-width: 80%;
}